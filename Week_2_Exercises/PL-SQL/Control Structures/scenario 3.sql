-- Create CUSTOMERS table
CREATE TABLE CUSTOMERS (
    CUSTOMER_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(50),
    AGE NUMBER,
    LOAN_INTEREST_RATE NUMBER(5, 2),
    BALANCE NUMBER(15, 2),
    IS_VIP BOOLEAN
);

-- Create LOANS table
CREATE TABLE LOANS (
    LOAN_ID NUMBER PRIMARY KEY,
    CUSTOMER_ID NUMBER,
    LOAN_DUE_DATE DATE,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
);

-- Insert data
INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME, AGE, LOAN_INTEREST_RATE, BALANCE, IS_VIP) VALUES (1, 'John Doe', 65, 5.5, 15000, FALSE);
INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME, AGE, LOAN_INTEREST_RATE, BALANCE, IS_VIP) VALUES (2, 'Jane Smith', 45, 6.0, 8000, FALSE);
INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME, AGE, LOAN_INTEREST_RATE, BALANCE, IS_VIP) VALUES (3, 'Jim Brown', 70, 4.5, 20000, FALSE);
INSERT INTO LOANS (LOAN_ID, CUSTOMER_ID, LOAN_DUE_DATE) VALUES (1, 1, SYSDATE + 10);
INSERT INTO LOANS (LOAN_ID, CUSTOMER_ID, LOAN_DUE_DATE) VALUES (2, 2, SYSDATE + 40);
INSERT INTO LOANS (LOAN_ID, CUSTOMER_ID, LOAN_DUE_DATE) VALUES (3, 3, SYSDATE + 20);

--Scenario 3

DECLARE
    CURSOR loan_cursor IS
        SELECT customer_id, loan_due_date
        FROM LOANS
        WHERE loan_due_date BETWEEN SYSDATE AND SYSDATE + 30;

    v_customer_id LOANS.customer_id%TYPE;
    v_loan_due_date LOANS.loan_due_date%TYPE;

BEGIN
    OPEN loan_cursor;

    LOOP
        FETCH loan_cursor INTO v_customer_id, v_loan_due_date;
        EXIT WHEN loan_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Reminder: Customer ' || v_customer_id || ', your loan is due on ' || TO_CHAR(v_loan_due_date, 'YYYY-MM-DD'));

    END LOOP;

    CLOSE loan_cursor;
END;
/
